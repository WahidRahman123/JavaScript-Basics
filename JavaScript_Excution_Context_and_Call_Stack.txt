***Same as C++, how code works.
When a file is created,
1. Global execution context or Global environment is created and it is refered to 'this' keyword.
2. new variable environment + execution thread are created in where two phases are created:
   a. Memory phase or Memory Creation Phase:
        All the declarations are added in this phase.
   b. Execution phase:
        All the initializations and operations are performed in this phase.

---------------------------------------
One Example:
---------------------------------------
1.    let val1 = 10
2.    let val2 = 5
3.    function addNum(num1, num2){
4.      let total = num1 + num2
5.      return total
6.    }
7.    let result1 = addNum(val1, val2)
8.    let result2 = addNum(10, 2)
---------------------------------------

What happens? Answer:
1. Global Execution Context is created and refered to 'this'.
2. Memory phase (Also called first cycle):
    From line 1: val1 -> undefined
    From line 2: val2 -> undefined
    From line 3: addNum -> definition(line 4 to 6 is written as definition)
    From line 7: result1 -> undefined
    From line 8: result2 -> undefined

2. Execution phase (Also called 2nd cycle):
    From line 1: val1 <- 10
    From line 2: val2 <- 5
    From line 7: addNum <- [new variable environment(NVE) + execution thread]--->same from (1-3) happened here. 
    From line 7: Delete the [new variable environment(NVE) + execution thread]
    From line 7: result1 <- 15
    From line 8: result2 <- 12

===============================================================================
Call Stack:
-----------
JavaScript uses a Call Stack to track the functions in a program. The call stack works on the Last In, First Out (LIFO) principle. This means that the most recently called function will be the first to be completed. Whenever a function is called, a new frame is added to the top of the stack.

To practice in Chrome:
inspect -> Sources -> Snippets -> New Snippets -> ....